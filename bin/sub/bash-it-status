#!/usr/bin/env bash
# shellcheck disable=SC1090,SC2155
set -o errexit
set -o errtrace
set -o nounset
set -o pipefail
[[ -n "${XTRACE:+x}" ]] && set -o xtrace
[[ -n "${DEBUG:-}" ]] && IS_DEBUG=true || IS_DEBUG=false

_print_bash-it-status() {
  local type=$1
  local name=$2
  echo "## [$type]"
  printf "bash-it enable %s " "$type"
  (for i in $BASH_IT/enabled/*.${name}.bash; do echo "$i" | awk -F"/" '{print $NF}' | sed -E "s/[[:digit:]]+---([a-zA-Z0-9_-]+).${name}.bash/\\1/"; done) | tr '\n' ' '
  echo ""
  echo ""
}

bash-it-status() {
  _print_bash-it-status "alias" "aliases"
  _print_bash-it-status "plugin" "plugin"
  _print_bash-it-status "completion" "completion"
}

build-bash-it-status-script() {
  local target=$1

  cat <<'EOF' > "$target"
#!/usr/bin/env bash
# shellcheck disable=SC1090

set -o errexit
set -o nounset
set -o pipefail
[[ -n "${XTRACE:+x}" ]] && set -o xtrace
[[ -n "${VERBOSE:+x}" ]] && set -o verbose
[[ -n "${DEBUG:-}" ]] && IS_DEBUG=true || IS_DEBUG=false
[[ $- =~ [x] ]] && PS4='+[${BASH_SOURCE}:${LINENO}:${FUNCNAME[0]:+${FUNCNAME[0]}}()]: '

source "$HOME/.bash_it.bash"

bash-it disable alias all
bash-it disable plugin all
bash-it disable completion all

EOF

  bash-it-status >> "$target"
  echo "echo '[bash_it reset done]'" >> "$target"
}


usage() {
cat <<EOF
Usage: $0 [Options]

Options:
    -h --help               Show help
    -e                      To export bash code
EOF
}

main() {
  local arg=${1:-}
  if [[ $arg == -h ]] || [[ $arg == --help ]]; then
    usage
    exit 0
  fi

  if [[ $arg == -e ]]; then
    build-bash-it-status-script ~/.bash_it/custom/reset
  else
    bash-it-status
  fi
}

main "$@"
