#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

readonly SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"

source "$SCRIPT_DIR/bash/xdg.bash"
source "$SCRIPT_DIR/deps/lobash.bash"
source "$SCRIPT_DIR/check"

check_uninstalled_cmd() {
  local cmd=$1
  if l.has_not command "$cmd" ; then
    echo "command [$cmd] is not installed. ❌"
    return 0
  else
    echo "command [$cmd] is installed. ✅"
    return 1
  fi
}

_install_build_essential() {
  echo "[_install_build_essential_${SYSTEM}]"
  _install_build_essential_${SYSTEM}

  if has not command curl ; then
    echo 'To install curl'
    _install_curl
  fi

  if has not command rvm ; then
    echo 'To install rvm and ruby'
    _install_rvm
  fi

  if has not command python ; then
    echo 'To install python'
    _install__python_${SYSTEM}
  fi

  # special command nvm
  if command -v nvm != 'nvm' ; then
    echo 'To install nvm and node'
  fi
}

_install_git_Macos() {
  brew install git
}

_install_rvm() {
  gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
  curl -sSL https://get.rvm.io | bash -s stable --ruby

  rvm install 2 --verify-downloads
  rvm --default use 2
}

_install_nvm() {
  export NVM_DIR="$HOME/.nvm"
  git clone https://github.com/creationix/nvm.git "$NVM_DIR"
  cd "$NVM_DIR"
  git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" origin`
  cd -
  . "$NVM_DIR/nvm.sh"

  nvm install 12
  npm alias default 12
  nvm use --delete-prefix default
}

_bootstrap_common() {
  echo '[Bootstrap in common]'

  echo 'To git clone submodules'
  git submodule update --init --recursive

  echo 'To mkdir -p general work directories'
  mkdir -p ~/.sshrc.d
  _install_build_essential

  if [[ ! -d ~/.bash_it ]] ; then
    echo 'To download bash_it'
    git clone --depth 1 https://github.com/Bash-it/bash-it.git ~/.bash_it
    ~/.bash_it/install.sh --no-modify-config
    ./bash_it/reset.sh
  fi

  _install_ruby
  _install_python
  _install_node

  if [[ ! -d ~/dotfiles ]] ; then
    echo 'To download my dotfiles'
    git clone --depth 1 --recursive git@github.com:adoyle-h/dotfiles.git ~/dotfiles
    # ~/dotfiles/install
  fi

  if command -v nvm != 'nvm' ; then
    echo 'To install nvm'
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash

    read -rp "To install NodeJS. Which version? (Defaults to node latest)" answer
    if [[ -z $answer ]]; then
      answer=node
    fi

    echo "To install node. nvm install $answer"
    nvm install $answer
  fi

  if l.ask 'To install taskbook'; then
    npm i -g taskbook
  else
    cat <<<EOF
      You can install taskbook in manually by "npm i -g taskbook"
    EOF
  fi

  if [[ ! -d ~/dotfiles/secrets ]] ; then
    echo 'To download my secrets'
    # git clone --depth 1  ~/dotfiles/secrets
  fi

  if check_uninstalled_cmd cheat ; then
    if l.ask 'To download my cheatsheet'; then
      echo 'To install cheat'
      pip install --user cheat
    fi
  fi

  if [[ ! -d ~/dotfiles/cheat ]] ; then
    if l.ask 'To download my cheatsheet'; then
      git clone --depth 1 git@github.com:adoyle-h/my-command-cheat.git ~/dotfiles/cheat
    fi
  fi

  if [[ ! -d ~/dotfiles/nvim ]] ; then
    if l.ask 'To install nvim'; then
      echo 'To download my nvim configuration'
      git clone --depth 1 git@github.com:adoyle-h/neovim-config.git ~/dotfiles/nvim
    fi
  fi

  if check_uninstalled_cmd fzf ; then
    if l.ask 'To install fzf'; then
      git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
      ~/.fzf/install
    else
      cat <<<EOF
        You can install fzf in manually by below commands.
        """
        git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
        ~/.fzf/install
        """
      EOF
    fi
  fi

  if check_uninstalled_cmd grip ; then
    if l.ask 'To install grip'; then
      pip install grip
    fi
  fi

  ./dotbot

  # Restart your shell

  echo 'Reset bash-it'
  . ${SCRIPT_DIR}/bootstraps/reset-bash

  echo 'To setup bash-custom plugins'
  a plugins-enable $(cat ./bootstraps/recommends/custom_plugins)

  echo '[Done] Bootstrap in common'
}

bootstrap_MacOS() {
}

_bootstrap_linux() {
  echo '[Bootstrap in linux]'
  echo '[Done] Bootstrap in linux'
}

check_support() {
}

check_support
echo "[Bootstrap common settings]"
_bootstrap_common
# clone my secret folders
echo "[Bootstrap $SYSTEM settings]"
_bootstrap_$SYSTEM
